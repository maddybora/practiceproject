import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

# Step 1: Data Preparation
url = "https://github.com/dsrscientist/dataset4/raw/main/Grades.csv"
grades_data = pd.read_csv(url)

# Step 2: Data Exploration and Preprocessing
# No missing values or outliers, so no preprocessing required.

# Splitting into features (course grades) and target variable (CGPA)
features = grades_data.drop(['Seat No', 'CGPA'], axis=1)
target = grades_data['CGPA']

# Step 3: Feature Selection and Engineering
# No specific feature selection or engineering in this example.

# Step 4: Data Split
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Step 5: Data Encoding (if necessary)
# Encode course grades to numerical values
le = LabelEncoder()
X_train_encoded = X_train.apply(le.fit_transform)
X_test_encoded = X_test.apply(le.transform)

# Step 6: Model Selection and Training
model = LinearRegression()
model.fit(X_train_encoded, y_train)

# Step 7: Model Evaluation
y_pred = model.predict(X_test_encoded)
mse = mean_squared_error(y_test, y_pred)
rmse = mean_squared_error(y_test, y_pred, squared=False)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared Score (R2):", r2)

# Step 8: Model Deployment
# You can deploy the model for future use as per your requirement.
